openapi: 3.0.1
info:
  version: 1.1.0
  title: Forma Core API documentation
  description: |
    Documentation for Forma Core API, containing details about authorization, endpoints, request
    and response parameters, as well as request and response samples.

    # Authentication
    The Forma Core API uses a **bearer** token authorization method using the **JSON Web Token (JWT)**
    format. This means that all requests to endpoints protected with authorization must include
    the `Authorization` request header with a value conforming to the `JWT insert_token` format. Without
    this token the server will respond with a `401 Unauthorized` error. The JWT token can be acquired
    by authenticating the user at the `GET /api/user/auth` endpoint with email address and password.
    A valid JWT token is also included in the response of a successful account creation.

    ### Authorization
    The Forma Core API uses [attribute-based access control](https://en.wikipedia.org/wiki/Attribute-based_access_control)
    through the usage of [CASL](https://casl.js.org/v5/en/guide/intro). When users attempt to access a resource or
    perform an action that they do not have permission for, the server will automatically respond with a `403 Forbidden`
    error. With proper front-end implementation of the Forma Core API this error should never be sent to the client.

externalDocs:
  description: View the Forma Core API repository here
  url: https://github.com/Forma-AT/forma-core
tags:
  - name: Auth
    description: Authentication and account reset endpoints
  - name: User
    description: User management endpoints
  - name: School
    description: School management endpoints
paths:
  '/api/user/auth':
    post:
      tags:
        - Auth
      summary: Authenticate user
      description: Authenticate user with email address and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/User/properties/email'
                password:
                  $ref: '#/components/schemas/Misc/properties/currentPassword'
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithAuthorization'
        400:
          description: The email address or password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/user/password/forgot':
    post:
      tags:
        - Auth
      summary: Forgot password
      description: Request a password reset code to the email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: '#/components/schemas/User/properties/email'
      responses:
        200:
          description: A password reset code has been sent to the email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
  '/api/user/password/reset':
    post:
      tags:
        - Auth
      summary: Reset password
      description: Reset a user's password using the code received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - code
                - password
              properties:
                userId:
                  $ref: '#/components/schemas/User/properties/id'
                code:
                  $ref: '#/components/schemas/Misc/properties/emailCode'
                password:
                  $ref: '#/components/schemas/Misc/properties/newPassword'
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        400:
          description: The provided password is too weak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: The reset code is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/user':
    put:
      tags:
        - User
      summary: Create user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - email
                - firstName
                - lastName
                - password
                - language
              properties:
                type:
                  $ref: '#/components/schemas/User/properties/type'
                email:
                  $ref: '#/components/schemas/User/properties/email'
                phone:
                  $ref: '#/components/schemas/User/properties/phone'
                firstName:
                  $ref: '#/components/schemas/User/properties/firstName'
                lastName:
                  $ref: '#/components/schemas/User/properties/lastName'
                password:
                  $ref: '#/components/schemas/Misc/properties/newPassword'
                language:
                  $ref: '#/components/schemas/User/properties/language'
      responses:
        201:
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithAuthorization'
        400:
          description: One or more fields were invalid, erroneous fields are in `details`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithDetails'
  '/api/user/{userId}':
    get:
      tags:
        - User
      summary: Get user
      description: Get a user's detailed information
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: User data retreived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithUser'
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete a user's account and all associated data
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
              properties:
                currentPassword:
                  $ref: '#/components/schemas/Misc/properties/currentPassword'
      responses:
        200:
          description: User account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        400:
          description: The password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/user/{userId}/verify':
    post:
      tags:
        - User
      summary: Verify user
      description: Verify a user account with the code received via email
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  $ref: '#/components/schemas/Misc/properties/emailCode'
      responses:
        200:
          description: Account verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithUser'
        404:
          description: The verification code is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/user/{userId}/profile':
    post:
      tags:
        - User
      summary: Update user profile
      description: Update the user's profile information with the provided fields
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
              properties:
                currentPassword:
                  $ref: '#/components/schemas/Misc/properties/currentPassword'
                email:
                  $ref: '#/components/schemas/User/properties/email'
                phone:
                  $ref: '#/components/schemas/User/properties/phone'
                firstName:
                  $ref: '#/components/schemas/User/properties/firstName'
                lastName:
                  $ref: '#/components/schemas/User/properties/lastName'
                password:
                  $ref: '#/components/schemas/Misc/properties/newPassword'
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithUser'
        400:
          description: One or more fields were invalid, erroneous fields are in `details`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithDetails'
  '/api/user/{userId}/language':
    post:
      tags:
        - User
      summary: Update user language
      description: Update the user's preferred language
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - language
              properties:
                language:
                  $ref: '#/components/schemas/User/properties/language'
      responses:
        200:
          description: User language updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithUser'
        400:
          description: The language code is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/school/':
    put:
      tags:
        - School
      summary: Create school
      description: Create a new school and assign it to a school administrator's account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - street
                - city
                - zip
                - state
                - country
              properties:
                name:
                  $ref: '#/components/schemas/School/properties/name'
                description:
                  $ref: '#/components/schemas/School/properties/description'
                street:
                  $ref: '#/components/schemas/School/properties/address/properties/street'
                city:
                  $ref: '#/components/schemas/School/properties/address/properties/city'
                zip:
                  $ref: '#/components/schemas/School/properties/address/properties/zip'
                state:
                  $ref: '#/components/schemas/School/properties/address/properties/state'
                country:
                  $ref: '#/components/schemas/School/properties/address/properties/country'
      responses:
        201:
          description: School created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithSchool'
        400:
          description: One or more fields were invalid, erroneous fields are in `details`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithDetails'
  '/api/school/{schoolId}':
    get:
      tags:
        - School
      summary: Get school
      description: Get a school's detailed information
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/schoolId'
      responses:
        200:
          description: School data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithSchool'
    post:
      tags:
       - School
      summary: Update school
      description: Update a school's information with the provided fields
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/schoolId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/School/properties/name'
                description:
                  $ref: '#/components/schemas/School/properties/description'
                street:
                  $ref: '#/components/schemas/School/properties/address/properties/street'
                city:
                  $ref: '#/components/schemas/School/properties/address/properties/city'
                zip:
                  $ref: '#/components/schemas/School/properties/address/properties/zip'
                state:
                  $ref: '#/components/schemas/School/properties/address/properties/state'
                country:
                  $ref: '#/components/schemas/School/properties/address/properties/country'
      responses:
        200:
          description: School updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponseWithSchool'
        400:
          description: One or more fields were invalid, erroneous fields are in `details`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithDetails'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 1f3a85df-3f1a-4dff-bfa9-d43868e4a54c
          description: "The universally unique id ([UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) of the user"
        type:
          type: string
          example: school
          description: "The type of the user's account, can be `school` or `teacher`"
        email:
          type: string
          example: john.doe@example.com
          description: "The user's email address in [E.123](https://en.wikipedia.org/wiki/E.123) format"
        phone:
          type: string
          nullable: true
          example: "+32460131530"
          description: "The user's phone number in [E.123](https://en.wikipedia.org/wiki/E.123) **international notation** and **without spaces**"
        firstName:
          type: string
          example: John
          description: "The first name of the user"
        lastName:
          type: string
          example: Doe
          description: "The last name of the user"
        password:
          type: string
          example: $2b$10$/CsmuB3L8HZ/TxffTe5shOrHyw.7Po4FN/1cxc9Hhmwq4JjGpI2Iy
          description: "The hashed password of the user"
        emailConfirmed:
          type: boolean
          example: true
          description: "The status of the user's email address confirmation"
        schoolId:
          type: string
          nullable: true
          example: bea1828d-0832-4588-a449-cd84b8c6bb60
          description: "The id of the school the user owns, if they are of the user type `school`"
        language:
          type: string
          example: en
          description: "The user's preferred language, **must** be in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format"
        createdAt:
          type: number
          example: 1621065270077
          description: "The date of the user's creation in milliseconds"
        updatedAt:
          type: number
          example: 1621065390465
          description: "The date of the user's last update in milliseconds"
    School:
      type: object
      properties:
        id:
          type: string
          example: bea1828d-0832-4588-a449-cd84b8c6bb60
          description: "The universally unique id ([UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) of the school"
        name:
          type: string
          example: Helsinki Metropolia University of Applied Sciences
          description: "The name of the school"
        description:
          type: string
          nullable: true
          example: |
            Metropolia's new Developer Campus for Smart Solutions in Karamalmi, Espoo was opened
            in August 2019. On the ICT Campus people are number one, not zero. The Campus has good
            connections to companies and abroad. The mission is to create solutions for tomorrow with
            the help of smart technologies and process leadership.
          description: "The description of the school, such as the substitution policy"
        address:
          type: object
          description: "The address of the school"
          properties:
            street:
              type: string
              example: Karaportti 2
              description: "The `street` part of the school's address"
            city:
              type: string
              example: Espoo
              description: "The `city` part of the school's address"
            zip:
              type: string
              example: '02610'
              description: "The `zip` part of the school's address"
            state:
              type: string
              example: Uusimaa
              description: "The `state` part of the school's address"
            country:
              type: string
              example: Finland
              description: "The `country` part of the school's address"
        createdAt:
          type: number
          example: 1621065270077
          description: "The date of the school's creation in milliseconds"
        updatedAt:
          type: number
          example: 1621065390465
          description: "The date of the school's last update in milliseconds"
    Misc:
      type: object
      properties:
        ok:
          type: boolean
          example: true
          description: "Always `true` to indicate that the action was successful"
        currentPassword:
          type: string
          example: r0BVP4OOp3838Y6zP6C4
          description: "The user's current unhashed password"
        newPassword:
          type: string
          example: Ln0W9k4RH99K83U8sVs4
          description: "The user's new unhashed password"
        emailCode:
          type: string
          example: u0680m0a31O5390P31X2
          description: "The code received via email"
        token:
          type: string
          example: eyJhbGciOiJ...98vI6bxl1s94xI
          description: "Bearer authorization token"
    OkResponse:
      type: object
      properties:
        ok:
          $ref: '#/components/schemas/Misc/properties/ok'
    OkResponseWithAuthorization:
      type: object
      properties:
        ok:
          $ref: '#/components/schemas/Misc/properties/ok'
        token:
          $ref: '#/components/schemas/Misc/properties/token'
        userId:
          $ref: '#/components/schemas/User/properties/id'
    OkResponseWithUser:
      type: object
      properties:
        ok:
          $ref: '#/components/schemas/Misc/properties/ok'
        user:
          $ref: '#/components/schemas/User'
    OkResponseWithSchool:
      type: object
      properties:
        ok:
          $ref: '#/components/schemas/Misc/properties/ok'
        school:
          $ref: '#/components/schemas/School'
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A message explaining what went wrong, **for developers only (do not display)**
    ErrorResponseWithDetails:
      type: object
      properties:
        message:
          type: string
          description: A message explaining what went wrong, **for developers only (do not display)**
        details:
          type: object
          description: An object of error messages, where keys match fields from the request body, **for developers only (do not display)**
  parameters:
    userId:
      in: path
      name: userId
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/id'
    schoolId:
      in: path
      name: schoolId
      required: true
      schema:
        $ref: '#/components/schemas/School/properties/id'
  responses:
    UnauthorizedResponse:
      description: Unauthorized - the user must be logged in to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenResponse:
      description: Forbidden - the user is not allowed to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundResponse:
      description: Not found - the requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal server error - something unexpected has gone wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
